// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TesteBackendEnContact.Database;

#nullable disable

namespace TesteBackendEnContact.Migrations
{
    [DbContext(typeof(ContactDbContext))]
    [Migration("20240226105513_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.27");

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.ContactBook.Company.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactBookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.ContactBook.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactBookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContactBookId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.ContactBook.ContactBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("ContactBooks");
                });

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.ContactBook.Contact", b =>
                {
                    b.HasOne("TesteBackendEnContact.Core.Domain.ContactBook.ContactBook", "ContactBook")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactBook");
                });

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.ContactBook.ContactBook", b =>
                {
                    b.HasOne("TesteBackendEnContact.Core.Domain.ContactBook.Company.Company", "Company")
                        .WithOne("ContactBook")
                        .HasForeignKey("TesteBackendEnContact.Core.Domain.ContactBook.ContactBook", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.ContactBook.Company.Company", b =>
                {
                    b.Navigation("ContactBook");
                });

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.ContactBook.ContactBook", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
